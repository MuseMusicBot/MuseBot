# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pr:
- master

# parameters:
#   - name: releaseVersion
#     displayName: Release Version
#     type: string
#     default: ' '

workspace:
  clean: all

pool:
  name: 'Default'

variables:
- name: doRelease
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
- name: solution
  value: '**/MusicBot.sln'
- name: 'buildPlatform'
  value: 'Any CPU'
- name : 'buildConfiguration'
  value: 'Release'

steps:
- checkout: self
- task: NuGetToolInstaller@1
  displayName: 'Download nuget packages'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: CmdLine@2
  displayName: 'Make windows dir'
  inputs:
    script: 'mkdir $(Build.ArtifactStagingDirectory)\windows'

- task: CmdLine@2
  displayName: 'Make linux dir'
  inputs:
    script: 'mkdir $(Build.ArtifactStagingDirectory)\linux'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.x'

- task: VSBuild@1
  displayName: 'Build project (Windows)'
  inputs:
    solution: '**/MusicBot/MusicBot.csproj'
    vsVersion: 'latest'
    msbuildArgs: '/r /t:Publish /p:PublishSingleFile=true /p:RuntimeIdentifier=win-x64 /p:DebugType=None /p:DebugSymbols=false /p:PublishDir=$(Build.ArtifactStagingDirectory)\windows'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    clean: true

- task: VSBuild@1
  displayName: 'Build project (Linux)'
  inputs:
    solution: '**/MusicBot/MusicBot.csproj'
    vsVersion: 'latest'
    msbuildArgs: '/r /t:Publish /p:PublishSingleFile=true /p:RuntimeIdentifier=linux-x64 /p:DebugType=None /p:DebugSymbols=false /p:PublishDir=$(Build.ArtifactStagingDirectory)\linux'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    clean: true

- task: CopyFiles@2
  inputs:
    SourceFolder: 'MusicBot/'
    Contents: 'muse-banner.png'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\windows'

- task: CopyFiles@2
  inputs:
    SourceFolder: 'MusicBot/'
    Contents: 'muse-banner.png'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\linux'

- task: ArchiveFiles@2
  displayName: "Archive Windows build"
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\windows'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\MuseBot-Windows.zip'
    replaceExistingArchive: true

- task: ArchiveFiles@2
  displayName: "Archive Linux build"
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\linux'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\MuseBot-Linux.zip'
    replaceExistingArchive: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $a = $(git tag --sort=-v:refname).split('`n')[0]
      $ver1 = $a -replace 'v'
      $ver2 = $ver1.Split(".")
      $ver3 = ''
      if ([int]$ver2[0] -eq 1 -and [int]$ver2[1] -lt 3) {
      $ver3 = '1.3'
      } else {
          $ver3 = $ver2[0] + '.' + [string]$([int]$ver2[1] + 1)
      }
      
      $ver3 = $ver3.Trim()

      Write-Host "##vso[task.setvariable variable=releaseVersion;]"$($ver3)""
    workingDirectory: '$(Build.SourcesDirectory)'

- task: CmdLine@2
  inputs:
    script: 'echo v$(releaseVersion)'

- task: PublishBuildArtifacts@1
  condition: eq(variables['doRelease'], false)
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\MuseBot-Windows.zip'
    ArtifactName: 'MuseBot'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  condition: eq(variables['doRelease'], false)
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\MuseBot-Linux.zip'
    ArtifactName: 'MuseBot'
    publishLocation: 'Container'

- task: GitHubRelease@1
  condition: eq(variables['doRelease'], true)
  inputs:
    gitHubConnection: 'DrDevinRX'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(releaseVersion)'
    title: 'MuseBot v$(releaseVersion)'
    assets: '$(Build.ArtifactStagingDirectory)/MuseBot*.zip'
    isDraft: false
    changeLogCompareToRelease: 'lastNonDraftRelease'
    changeLogType: 'commitBased'
